"use strict";(self.webpackChunkdohoanghuy_github_io_docusaurus=self.webpackChunkdohoanghuy_github_io_docusaurus||[]).push([[2909],{2254:e=>{e.exports=JSON.parse('{"label":"Grasp","permalink":"/docs/tags/grasp","allTagsPath":"/docs/tags","count":10,"items":[{"id":"GRASP/controller","title":"Controller","description":"The controller pattern assigns the responsibility of dealing with system events to a non-UI class that represents the overall system or a use case scenario. A controller object is a non-user interface object responsible for receiving or handling a system event.","permalink":"/docs/GRASP/controller"},{"id":"GRASP/creator","title":"Creator","description":"Who creates an Object? Or who should create a new instance of some class?","permalink":"/docs/GRASP/creator"},{"id":"GRASP/high-cohesion","title":"High cohesion","description":"High cohesion is an evaluative pattern that attempts to keep objects appropriately focused, manageable and understandable","permalink":"/docs/GRASP/high-cohesion"},{"id":"GRASP/indirection","title":"Indirection","description":"The indirection pattern supports low coupling (and reuse potential) between two elements by assigning the responsibility of mediation between them to an intermediate object.","permalink":"/docs/GRASP/indirection"},{"id":"GRASP/information-expert","title":"Information expert","description":"Information expert (also expert or the expert principle) is a principle used to determine where to delegate responsibilities such as methods, computed fields, and so on.","permalink":"/docs/GRASP/information-expert"},{"id":"GRASP/intro","title":"Intro","description":"Guides in assigning responsibilities to collaborate objects","permalink":"/docs/GRASP/intro"},{"id":"GRASP/low-coupling","title":"Low coupling","description":"Coupling is a measure of how strongly one element is connected to/has knowledge of/or relies on other elements.","permalink":"/docs/GRASP/low-coupling"},{"id":"GRASP/polymorphism","title":"Polymorphism","description":"Responsibility for defining the variation of behaviors based on type is assigned to the type for which this variation happens","permalink":"/docs/GRASP/polymorphism"},{"id":"GRASP/protected-varioations","title":"Protected variations","description":"The protected variations pattern protects elements from the variations on other elements (objects, systems, subsystems) by wrapping the focus of instability with an interface and using polymorphism to create various implementations of this interface.","permalink":"/docs/GRASP/protected-varioations"},{"id":"GRASP/pure-fabrication","title":"Pure fabrication","description":"A pure fabrication is a class that does not represent a concept in the problem domain, specially made up to achieve low coupling, high cohesion, and the reuse potential thereof derived (when a solution presented by the information expert pattern does not)","permalink":"/docs/GRASP/pure-fabrication"}]}')}}]);