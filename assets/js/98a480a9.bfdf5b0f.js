"use strict";(self.webpackChunkdohoanghuy_github_io_docusaurus=self.webpackChunkdohoanghuy_github_io_docusaurus||[]).push([[1748],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),d=n,m=p["".concat(s,".").concat(d)]||p[d]||h[d]||a;return r?o.createElement(m,i(i({ref:t},u),{},{components:r})):o.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3880:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const a={description:"Create a doc page with rich content.",tags:["tdd","test driven development (kent beck), xUnit test pattern, growing object oriented guided by test"]},i="TDD Flow",l={unversionedId:"TDD/tdd",id:"TDD/tdd",title:"TDD Flow",description:"Create a doc page with rich content.",source:"@site/docs/04-TDD/tdd.md",sourceDirName:"04-TDD",slug:"/TDD/tdd",permalink:"/docs/TDD/tdd",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-TDD/tdd.md",tags:[{label:"tdd",permalink:"/docs/tags/tdd"},{label:"test driven development (kent beck), xUnit test pattern, growing object oriented guided by test",permalink:"/docs/tags/test-driven-development-kent-beck-x-unit-test-pattern-growing-object-oriented-guided-by-test"}],version:"current",frontMatter:{description:"Create a doc page with rich content.",tags:["tdd","test driven development (kent beck), xUnit test pattern, growing object oriented guided by test"]},sidebar:"tutorialSidebar",previous:{title:"Pure fabrication",permalink:"/docs/GRASP/pure-fabrication"}},s={},c=[{value:"RED",id:"red",level:2},{value:"GREEN",id:"green",level:2},{value:"YELLOW",id:"yellow",level:2},{value:"CLEAN TEST",id:"clean-test",level:2},{value:"TEST DESIGN",id:"test-design",level:2},{value:"TEST PROCESS (dig a hole)",id:"test-process-dig-a-hole",level:2},{value:"TRANSFORMATION PRIORITY PREMISE",id:"transformation-priority-premise",level:2}],u={toc:c},p="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"tdd-flow"},"TDD Flow"),(0,n.kt)("p",null,"RED - GREEN - YELLOW"),(0,n.kt)("p",null,"Step by step, from generic  to specific with incremental algorithmics. Only do simple change at a step"),(0,n.kt)("p",null,"As the test gets more specific, the code gets more generic"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Nature of test, it's not fully constrain a program, it not specify the final behavior (only specify the desire of human). It only prove the program wrong, it's can't prove the program right.")),(0,n.kt)("h2",{id:"red"},"RED"),(0,n.kt)("p",null,"Write failed test first. Write the generic test case first (it's will danger for speficic testcase cause make production code generic, which might got stuck when test gradualy develop => you have to write testcase in correct order)"),(0,n.kt)("p",null,"Migh be struggle, getting stuck (because exiting production so specific)."),(0,n.kt)("p",null,"Triple A rule (Arrange - Act - Assert - ","[clean up/tear down]",")."),(0,n.kt)("p",null,"Arrange is setup the state for the test. Setup the test fixture: transisent fresh, persistent fresh, persistent shared. Using test hirecy to keep our setup manageable"),(0,n.kt)("p",null,"Act is calling the funtion to be tested. Single/Multiple/Compose action"),(0,n.kt)("p",null,"Assert is test the function to the right things. Single (logical) assertion rule: 1 test should have only 1 logical assert (logical assert represent by several physical assert). Not violate the rule by: Arrange -> Act -> Assert -> Act -> Assert -> Act -> Assert ... Test should be independences & isolation, we shouldn't take output of a test as input of other test"),(0,n.kt)("p",null,"Annihilate"),(0,n.kt)("p",null,"Clean Composition to make the test clean, readable"),(0,n.kt)("h2",{id:"green"},"GREEN"),(0,n.kt)("p",null,"Write production code to make it pass"),(0,n.kt)("p",null,"Try to make very small change to make it pass"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"if (specific) => loop while/foor (generic)")),(0,n.kt)("p",null,"Insome case, you might stuck at the middle, which make you have to rewrite lot of production code => stuck. Recommendation is to restart with testcase again"),(0,n.kt)("h2",{id:"yellow"},"YELLOW"),(0,n.kt)("p",null,"Refactor production/test code"),(0,n.kt)("h2",{id:"clean-test"},"CLEAN TEST"),(0,n.kt)("h2",{id:"test-design"},"TEST DESIGN"),(0,n.kt)("p",null,"Should 1 test file per class. Inner class (is exception case) normaly the result of refactoring, it shouldn't usually change the structure of the test to reflect of the refactor. The test test behavior of the outer class, the way behavior implemented is not of the test business (if I have to write a private function, i'm not going to let the test known that). If we refactoring to several new outer class (which used by other place) => we should imp test for it."),(0,n.kt)("p",null,"Avoid fragile test by apply SOLID"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"SRP: test should have single responsibility (for single class)"),(0,n.kt)("li",{parentName:"ul"},"OCP: prod code open for extend modification, test close for modify. Test shouldn't have knownledge it shouldn't have"),(0,n.kt)("li",{parentName:"ul"},"LSP: polymophism (test is client of production code)"),(0,n.kt)("li",{parentName:"ul"},"ISP: protect from to much knownledge (test is client of production code)"),(0,n.kt)("li",{parentName:"ul"},"DIP: test is low level detail, test is depend on prod code")),(0,n.kt)("p",null,"To known what test to write first? Think about what code you will write first. Let the code help you what test to write, list out the todo test (plan ahead a little bit). Using pattern ex: given_when_then"),(0,n.kt)("h2",{id:"test-process-dig-a-hole"},"TEST PROCESS (dig a hole)"),(0,n.kt)("p",null,"Start write simple test, treat each test as star to step down for further test (then you can remove simple star step test later)"),(0,n.kt)("p",null,"Assert first, it pull the rest of the test to the being by => deal with compiler error, execution error. This backward technique help build test from the back all the way to the begining"),(0,n.kt)("p",null,"Triangulation: The way we create genericnation. One to many technique"),(0,n.kt)("p",null,"The two disks story : 1 for test, 1 for prod code. If 1 of them destroyed, which want you expect to keep. In fact you can revert prod code from the test (not reverse)"),(0,n.kt)("p",null,"Good test - Test are specifications. It should read as a documentation (write the test that you want to read, write to the audience). Test the behavior, not the API"),(0,n.kt)("p",null,"Test come first:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"express all the ideas the author want to express"),(0,n.kt)("li",{parentName:"ul"},"pass all the test"),(0,n.kt)("li",{parentName:"ul"},"no duplication in code"),(0,n.kt)("li",{parentName:"ul"},"minimize the class & method ")),(0,n.kt)("p",null,"Kent Beck says:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"first make it work"),(0,n.kt)("li",{parentName:"ul"},"then make it right"),(0,n.kt)("li",{parentName:"ul"},"then make it fast & small")),(0,n.kt)("p",null,"Heresy"),(0,n.kt)("h2",{id:"transformation-priority-premise"},"TRANSFORMATION PRIORITY PREMISE"),(0,n.kt)("p",null,"Transformation is the counter part of refactoring, they are small change to the code that change habavior but reverse structure."),(0,n.kt)("p",null,"Refactoring changing the structure without significant change in behavior\nChange the behavior without significant change in the structure? => transformation"),(0,n.kt)("p",null,"Do transformantion in Red/Green/Refactor cycle.\nMaking the test pass => change behavior, not structure\nLater on refactor => change the structure, not behavior"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"As the test gets more specific, the code gets more generic")),(0,n.kt)("p",null,"Transformations:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"null: use to represent initial state of any function"),(0,n.kt)("li",{parentName:"ol"},"null to constant: use to return something"),(0,n.kt)("li",{parentName:"ol"},"constant to variale: to enable later sequence of transformations"),(0,n.kt)("li",{parentName:"ol"},"add computation: add 1 or more computation to intialize variable but not change the state of variable"),(0,n.kt)("li",{parentName:"ol"},"split the flow of control: adding if statment to split flow into 2 & only 2 path"),(0,n.kt)("li",{parentName:"ol"},"variable to array: use want you have more then 1 assumption on the same thing (one to many*)"),(0,n.kt)("li",{parentName:"ol"},"array to container: use when generalize an array to more comprehensive like dictionary or set"),(0,n.kt)("li",{parentName:"ol"},"convert if (specific form of while) to while (general form of if): use when realize the flow has already been split but now also repeated (+remove duplicate code)"),(0,n.kt)("li",{parentName:"ol"},"recurse: use want to repeat execution"),(0,n.kt)("li",{parentName:"ol"},"itegration: use when want to repeat but don't want use (9) in some reason"),(0,n.kt)("li",{parentName:"ol"},"assign: use want to alter the state of existing previous variable (be careful for begining of state)"),(0,n.kt)("li",{parentName:"ol"},"add case: use when we have split flow & want to split further")),(0,n.kt)("p",null,"Sometime, you will get bad algorithm (time complexity). If we choose transformation with right priority, we get better algorithms (sorting list example*). Try to apply transformation order from 1-12 to make the test pass will make you have better algorithm"))}h.isMDXComponent=!0}}]);