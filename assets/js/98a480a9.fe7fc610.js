"use strict";(self.webpackChunkdohoanghuy_github_io_docusaurus=self.webpackChunkdohoanghuy_github_io_docusaurus||[]).push([[1748],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),f=o,h=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3880:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={description:"Create a doc page with rich content.",tags:["tdd"]},i="Flow",l={unversionedId:"TDD/tdd",id:"TDD/tdd",title:"Flow",description:"Create a doc page with rich content.",source:"@site/docs/04-TDD/tdd.md",sourceDirName:"04-TDD",slug:"/TDD/tdd",permalink:"/docs/TDD/tdd",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-TDD/tdd.md",tags:[{label:"tdd",permalink:"/docs/tags/tdd"}],version:"current",frontMatter:{description:"Create a doc page with rich content.",tags:["tdd"]},sidebar:"tutorialSidebar",previous:{title:"Pure fabrication",permalink:"/docs/GRASP/pure-fabrication"}},s={},c=[{value:"RED",id:"red",level:2},{value:"GREEN",id:"green",level:2},{value:"YELLOW",id:"yellow",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"flow"},"Flow"),(0,o.kt)("p",null,"RED - GREEN - YELLOW"),(0,o.kt)("p",null,"Step by step, from generic to specific. Only do simple change at a step"),(0,o.kt)("h2",{id:"red"},"RED"),(0,o.kt)("p",null,"Write failed test first."),(0,o.kt)("p",null,"Single (logical) assertion rule, 1 test should have only 1 assert."),(0,o.kt)("p",null,"Triple A rule (Arrange - Act - Assert), arrange is setup the context for the test, act is calling the funtion to be tested, the assert is test the function to the right things => it's logical assertion not physical assert, logical assert represent by several call to assert."),(0,o.kt)("p",null,"Not violate the rule by: Arrange -> Act -> Assert -> Act -> Assert -> Act -> Assert ..."),(0,o.kt)("p",null,"Test should be independences & isolation, we should take output of a test as input of other test"),(0,o.kt)("h2",{id:"green"},"GREEN"),(0,o.kt)("p",null,"Write production code to make it pass"),(0,o.kt)("h2",{id:"yellow"},"YELLOW"),(0,o.kt)("p",null,"Refactor production/test code"))}d.isMDXComponent=!0}}]);